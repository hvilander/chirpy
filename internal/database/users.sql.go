// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (gen_random_uuid(), now(), now(), $1, $2)

RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE from users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const setIsRed = `-- name: SetIsRed :one
UPDATE users
SET
	updated_at = now(),
	is_chirpy_red = $1
WHERE id = $2

RETURNING id, updated_at, is_chirpy_red
`

type SetIsRedParams struct {
	IsChirpyRed sql.NullBool
	ID          uuid.UUID
}

type SetIsRedRow struct {
	ID          uuid.UUID
	UpdatedAt   sql.NullTime
	IsChirpyRed sql.NullBool
}

func (q *Queries) SetIsRed(ctx context.Context, arg SetIsRedParams) (SetIsRedRow, error) {
	row := q.db.QueryRowContext(ctx, setIsRed, arg.IsChirpyRed, arg.ID)
	var i SetIsRedRow
	err := row.Scan(&i.ID, &i.UpdatedAt, &i.IsChirpyRed)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
	updated_at = now(),
	email = $1,
	hashed_password = $2
WHERE id = $3

RETURNING id, created_at, updated_at, email, is_chirpy_red
`

type UpdateUserParams struct {
	Email          string
	HashedPassword sql.NullString
	ID             uuid.UUID
}

type UpdateUserRow struct {
	ID          uuid.UUID
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Email       string
	IsChirpyRed sql.NullBool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.HashedPassword, arg.ID)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}
